package com.company.sensorsAPI.controllers;

import com.company.sensorsAPI.SensorSimulation;
import com.company.sensorsAPI.entities.Room;
import com.company.sensorsAPI.entities.Sensor;
import com.company.sensorsAPI.entities.StatisticsData;
import com.company.sensorsAPI.repositories.RoomRepository;
import com.company.sensorsAPI.repositories.SensorRepository;
import com.company.sensorsAPI.repositories.StatisticsDataRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

@Controller
@RequestMapping(path = "/statistics_data")
public class StatisticsDataController {

    @Autowired // This means to get the bean called sensorRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StatisticsDataRepository statisticsDataRepository;
    @Autowired
    private SensorRepository sensorRepository;
    @Autowired
    private RoomRepository roomRepository;

    private String[] months = {"Leden", "Únor", "Březen", "Duben", "Květen", "Červen", "Červenec", "Srpen", "Září", "Říjen", "Listopad", "Prosinec"};

    @GetMapping(path = "/heatingInYear")
    public @ResponseBody
    double getHeatingInYear() {

        double ret = 0;

        for (StatisticsData statisticsData : statisticsDataRepository.findAll()) {
            ret += statisticsData.getLightsOnNumberInSeconds();
        }

        return ret / 86400;
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    HashMap<String, HashMap<String, List<Double>>> getStatisticsData() {

        Iterable<Sensor> sensorsFromRepo = sensorRepository.findAll();
        Iterable<StatisticsData> statisticsDataFromRepo = statisticsDataRepository.findAll();

        HashMap<String, HashMap<String, List<Double>>> ret = new HashMap<>();

        for (String month : months) {

            HashMap<String, List<Double>> roomsData = new HashMap<>();

            for (Sensor sensor : sensorsFromRepo) {


                if(roomRepository.findById(sensor.getRoom().getId()).isPresent()) {
                    String roomName = roomRepository.findById(sensor.getRoom().getId()).get().getName();

                    ArrayList<Double> values = new ArrayList<>(); // daysInYearHeating, lightOnMeanInMonth, totalEnergyConsumption

                    double millisecondsInYearHeatingOn = 0.0;

                    double lightOnMeanInSeconds = 0.0;
                    double lightTimeInSeconds = 0;
                    int numOfData = 0;

                    double totalEnergyConsumption = 0.0;

                    for (StatisticsData statisticsData : statisticsDataFromRepo) {
                        if(statisticsData.getSensor().getId().equals(sensor.getId())){

                            long timestamp = statisticsData.getTimestamp().getTime();
                            Calendar cal = Calendar.getInstance();
                            cal.setTimeInMillis(timestamp);
                            int monthNumber = cal.get(Calendar.MONTH);
                            for (int i = 0; i < months.length; i++) {
                                if(months[i].equals(month)) {
                                    if(monthNumber == i) {

                                        if(statisticsData.isWasHeated()) millisecondsInYearHeatingOn += SensorSimulation.WAIT_TIME;
                                        lightTimeInSeconds += statisticsData.getLightsOnNumberInSeconds();
                                        totalEnergyConsumption += statisticsData.getCurrentConsumption();
                                        numOfData++;

                                    }
                                }
                            }
                        }
                    }

                    double days = millisecondsInYearHeatingOn / 86400000;
                    lightOnMeanInSeconds = lightTimeInSeconds; // numOfData;
                    double lightOnMeanInHours = lightOnMeanInSeconds / 3600;

                    double x = (lightTimeInSeconds / numOfData);

                    values.add(days);
                    values.add(x);
                    values.add(totalEnergyConsumption);

                    roomsData.put(roomName, values);
                }

            }

            ret.put(month, roomsData);
        }

        return ret;

    }
}
